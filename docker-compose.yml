services:
  catvision:
    build: .
    image: catvision:cpu
    container_name: catvision
    restart: unless-stopped
    env_file: .env
    environment:
      # logging / warnings
      - GLOG_minloglevel=2
      - C10_LOG_LEVEL=ERROR
      - TORCH_CPP_LOG_LEVEL=ERROR
      - CAFFE2_LOG_LEVEL=ERROR
      - PYTHONWARNINGS=ignore::UserWarning
      - YOLO_CONFIG_DIR=/app/.ultralytics

      # CPU tuning
      - OMP_NUM_THREADS=3
      - MKL_NUM_THREADS=3

      # detection config
      - MAX_FRAMES_PER_RUN=300
      - DETECT_MODEL=yolov8n.pt
      - DETECT_IMGSZ=512
      - DETECT_CONF=0.20
      - DETECT_IOU=0.50
      - DETECT_TTA=0
    volumes:
      - ./samples:/app/samples
      - ./frames:/app/frames
      - ./frames_labeled:/app/frames_labeled
      - ./crops:/app/crops
      - ./cats:/app/cats
      - ./meta:/app/meta
      - ./predictions:/app/predictions
    depends_on:
      - framegrab
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  framegrab:
    image: lscr.io/linuxserver/ffmpeg:latest
    container_name: framegrab
    restart: unless-stopped
    env_file: .env
    working_dir: /work
    volumes:
      - ./samples:/work/samples
    command: >
      -nostdin -rtsp_transport tcp
      -i "${CAMERA_URL}"
      -vf fps=${CAP_FPS}
      -q:v ${JPEG_QUALITY}
      -f image2 -strftime 1
      "samples/%Y%m%d_%H%M%S.jpg"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  django:
    image: kittyweb:latest
    build:
      context: ./kittyweb
    container_name: kittyweb
    restart: unless-stopped
    env_file: ./kittyweb/.env
    working_dir: /app
    volumes:
      - ./:/app            # lets Django read crops/frames/predictions/meta
    ports:
      - "127.0.0.1:8000:8000"
    depends_on:
      - catvision